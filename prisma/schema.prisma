// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    forms         Form[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//Form Schema

model Form {
    id          String     @id @default(cuid())
    title       String
    description String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    questions   Question[]
    User        User?      @relation(fields: [userId], references: [id])
    userId      String?
}

model Question {
    id           String   @id @default(cuid())
    formId       String
    form         Form     @relation(fields: [formId], references: [id])
    questionText String
    questionType String // e.g., 'option', 'text', 'checkbox', etc.
    isRequired   Boolean
    answer       Answer? // One-to-one relationship with Answer
    options      Option[] // Relevant only for certain question types
}

model Answer {
    id         String   @id @default(cuid())
    questionId String   @unique
    answer     String // Answer content, can be adjusted to Json if needed for complex structures
    question   Question @relation(fields: [questionId], references: [id])
}

model Option {
    id         String   @id @default(cuid())
    questionId String
    optionText String
    question   Question @relation(fields: [questionId], references: [id])
    isSelected Boolean  @default(false)
}
